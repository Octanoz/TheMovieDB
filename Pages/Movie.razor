@page "/movie/{id:int}"
@inject TMDBClient TMDB

@if (movieDetails is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <PageTitle>@movieDetails.Title</PageTitle>

    <MudBreakpointProvider OnBreakpointChanged="OnBreakpointChanged">
        @if (isMediumToSmallScreen)
        {
            // This block is shown only for screen sizes between Small (exclusive) and Medium (inclusive)
            <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 mt-4">
                <MudGrid Spacing="4">
                    <MudItem md="4" Class="d-flex justify-center">
                        <MudImage Fluid="true" Src="@($"https://image.tmdb.org/t/p/w300{movieDetails.PosterPath}")" Width="300" Alt="" />
                    </MudItem>
                    <MudItem xs="12" md="8">
                        <MudPaper Elevation="0" Class="mud-theme-primary pa-2">
                            <MudText Typo="Typo.h4" Class="mb-3" Align="Align.Center">@movieDetails.Title</MudText>
                            <MudText Typo="Typo.body1">@movieDetails.Overview</MudText>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="mud-theme-secondary pa-2">
                            @if (DateTime.TryParse(movieDetails.ReleaseDate, out DateTime releaseDate))
                            {
                                <MudChip T="string" Color="Color.Dark">@releaseDate.ToString("MMMM dd yyy")</MudChip>
                            }
                            @{
                                var runtime = $"{movieDetails.Runtime / 60}h{movieDetails.Runtime % 60}m";
                                int rating = (int)Math.Round(movieDetails.VoteAverage);
                            }
                            <MudChip T="string" Color="Color.Dark">@runtime</MudChip>
                            <MudRating Class="pt-2 d-block" ReadOnly="true" SelectedValue="@rating" MaxValue="10" />
                            <MudText Class="d-block pb-2 ms-2" Typo="Typo.caption" Color="Color.Primary">@movieDetails.VoteAverage out of @movieDetails.VoteCount votes</MudText>
                            @foreach (var genre in movieDetails.Genres)
                            {
                                <MudChip T="string" Color="Color.Primary">@genre.Name</MudChip>
                            }
                            @if (!String.IsNullOrEmpty(movieDetails.Homepage))
                            {
                                <MudChip T="string" Color="Color.Info"><a href="@movieDetails.Homepage" target="_blank" style="color: whitesmoke;">Homepage</a></MudChip>
                            }
                            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary"><a href="@($"https://imdb.com/title/{movieDetails.ImdbId}")" style="color: linen;">IMDb</a></MudChip>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        }
        else if (isSmallScreen)
        {
            // This block is shown only for screen sizes up to and including Small
            @* <MudContainer MaxWidth="MaxWidth.Small" Class="pa-4 mt-4">
                <MudGrid Spacing="4">
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudImage Fluid="true" Src="@($"https://image.tmdb.org/t/p/w342{movieDetails.PosterPath}")" Width="342" Alt="" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="mud-theme-primary pa-2">
                            <MudText Typo="Typo.h4" Class="mb-3">@movieDetails.Title</MudText>
                            <MudText Typo="Typo.body1">@movieDetails.Overview</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudPaper Elevation="0" Class="mud-theme-secondary pa-2" >
                            @if (DateTime.TryParse(movieDetails.ReleaseDate, out DateTime releaseDate))
                            {
                                <MudChip T="string" Color="Color.Dark">@releaseDate.ToString("MMMM dd yyy")</MudChip>
                            }
                            @{
                                var runtime = $"{movieDetails.Runtime / 60}h{movieDetails.Runtime % 60}m";
                                int rating = (int)Math.Round(movieDetails.VoteAverage);
                            }
                            <MudChip T="string" Color="Color.Dark">@runtime</MudChip>
                            <MudRating Class="pt-2 d-block" ReadOnly="true" SelectedValue="@rating" MaxValue="10" />
                            <MudText Class="d-block pb-2 ms-2" Typo="Typo.caption" Color="Color.Primary">@movieDetails.VoteAverage out of @movieDetails.VoteCount votes</MudText>
                            @foreach (var genre in movieDetails.Genres)
                            {
                                <MudChip T="string" Color="Color.Primary">@genre.Name</MudChip>
                            }
                            @if (!String.IsNullOrEmpty(movieDetails.Homepage))
                            {
                                <MudChip T="string" Color="Color.Info"><a href="@movieDetails.Homepage" target="_blank" style="color: whitesmoke;" >Homepage</a></MudChip>
                            }
                            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary"><a href="@($"https://imdb.com/title/{movieDetails.ImdbId}")" style="color: linen;">IMDb</a></MudChip>
                        </MudPaper>                    
                    </MudItem>
                </MudGrid>                    
            </MudContainer> *@

            <MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
                <MudPaper Elevation="0" Class="mud-theme-primary d-flex justify-center mb-4" >
                    <MudImage Fluid="true" Src="@($"https://image.tmdb.org/t/p/w342{movieDetails.PosterPath}")" Width="342" Alt="" />
                </MudPaper>
                <MudText Typo="Typo.h4" Class="mb-3" Align="Align.Center">@movieDetails.Title</MudText>
                <MudText Typo="Typo.body1">@movieDetails.Overview</MudText>

                <MudPaper Elevation="0" Class="mud-theme-secondary pa-2 mt-4">
                    @if (DateTime.TryParse(movieDetails.ReleaseDate, out DateTime releaseDate))
                    {
                        <MudChip T="string" Color="Color.Dark">@releaseDate.ToString("MMMM dd yyy")</MudChip>
                    }
                    @{
                        var runtime = $"{movieDetails.Runtime / 60}h{movieDetails.Runtime % 60}m";
                        int rating = (int)Math.Round(movieDetails.VoteAverage);
                    }
                    <MudChip T="string" Color="Color.Dark">@runtime</MudChip>
                    <MudRating Class="pt-2" ReadOnly="true" SelectedValue="@rating" MaxValue="10" />
                    <MudText Class="d-block pb-2 ms-2" Typo="Typo.caption" Color="Color.Primary">@movieDetails.VoteAverage out of @movieDetails.VoteCount votes</MudText>
                    @foreach (var genre in movieDetails.Genres)
                    {
                        <MudChip T="string" Color="Color.Primary">@genre.Name</MudChip>
                    }
                    @if (!String.IsNullOrEmpty(movieDetails.Homepage))
                    {
                        <MudChip T="string" Color="Color.Info"><a href="@movieDetails.Homepage" target="_blank" style="color: whitesmoke;">Homepage</a></MudChip>
                    }
                    <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary"><a href="@($"https://imdb.com/title/{movieDetails.ImdbId}")" style="color: linen;">IMDb</a></MudChip>
                </MudPaper>
            </MudContainer>
        }
        else
        {
            // This block is shown for screen sizes larger than Medium
            <MudContainer MaxWidth="MaxWidth.False" Class="pa-0 position-relative">
                <MudPaper Elevation="0" Class="mud-theme-primary overflow-hidden">
                    <MudImage Fluid="true" Src="@($"https://image.tmdb.org/t/p/original{movieDetails.BackdropPath}")" Alt="@($"{movieDetails.Title} backdrop")" Style="width: 100%; object-fit: contain; filter: grayscale(75%) blur(2px);" />
                </MudPaper>
                <MudContainer Fixed="true" Class="absolute pa-0 d-flex align-center justify-end pointer-events-none" Style="inset: 0">
                    <MudPaper Elevation="0" Class="pa-6 rounded-lg" Style="background: rgba(0, 0, 0, 0.45); backdrop-filter: blur(8px); max-width: 90%; width: 100%; pointer-events: auto;">
                        <MudGrid>
                            <MudItem xs="3" >
                                <MudImage Fluid="true" Src="@($"https://image.tmdb.org/t/p/w500{movieDetails.PosterPath}")" Width="500" Alt=""/>
                            </MudItem>
                            <MudItem xs="12" md="6" Class="pa-4">
                                <MudPaper Elevation="0" Style="background-color: transparent;">
                                    <MudText Typo="Typo.h2" Class="mb-4" Style="color: linen;">@movieDetails.Title</MudText>
                                    <MudText Typo="Typo.h4" Class="mb-4" Style="color: linen;"><em>@movieDetails.Tagline</em></MudText>
                                    <MudText Typo="Typo.body1" Style="color: linen;">@movieDetails.Overview</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="2">
                                <MudPaper Elevation="0" Style="background-color: transparent;">
                                    @if (DateTime.TryParse(movieDetails.ReleaseDate, out DateTime releaseDate))
                                    {
                                        <MudChip T="string" Color="Color.Dark">@releaseDate.ToString("MMMM dd yyy")</MudChip>
                                    }
                                    @{
                                        var runtime = $"{movieDetails.Runtime / 60}h{movieDetails.Runtime % 60}m";
                                        int rating = (int)Math.Round(movieDetails.VoteAverage);
                                    }
                                    <MudChip T="string" Color="Color.Dark">@runtime</MudChip>
                                    <MudRating Class="pt-2" ReadOnly="true" SelectedValue="@rating" MaxValue="10" Color="Color.Primary" />
                                    <MudText Class="d-block pb-2 ms-2" Typo="Typo.caption" Color="Color.Primary">@movieDetails.VoteAverage out of @movieDetails.VoteCount votes</MudText>
                                    @foreach (var genre in movieDetails.Genres)
                                    {
                                        <MudChip T="string" Color="Color.Secondary">@genre.Name</MudChip>
                                    }
                                    @if (!String.IsNullOrEmpty(movieDetails.Homepage))
                                    {
                                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Info"><a href="@movieDetails.Homepage" target="_blank" style="color: linen;">Homepage</a></MudChip>                                        
                                    }
                                    <MudChip T="string" Variant="Variant.Outlined" Color="Color.Warning"><a href="@($"https://imdb.com/title/{movieDetails.ImdbId}")" style="color: goldenrod;">IMDb</a></MudChip>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudContainer>
            </MudContainer>
        }
    </MudBreakpointProvider>
}

@code {
    [Parameter]
    public int Id { get; set; }

    MovieDetails? movieDetails;
    bool isSmallScreen = false;
    bool isMediumToSmallScreen = false; 

    protected override async Task OnInitializedAsync()
    {
        movieDetails = await TMDB.GetMovieDetailsAsync(Id);
    }

    private void OnBreakpointChanged(Breakpoint breakpoint)
    {
        isMediumToSmallScreen = breakpoint > Breakpoint.Sm && breakpoint <= Breakpoint.Md;
        isSmallScreen = breakpoint <= Breakpoint.Sm;
        StateHasChanged();
    }
}